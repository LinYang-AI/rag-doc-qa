name: CI/CD Pipeline

on:
push:
branches: [ main, develop ]
pull_request:
branches: [ main ]
workflow_dispatch:  # Allow manual triggers

env:
PYTHON_VERSION: “3.11”
CACHE_VERSION: v1

jobs:
lint:
runs-on: ubuntu-latest
timeout-minutes: 10
steps:
- uses: actions/checkout@v4

```
- name: Set up Python
  uses: actions/setup-python@v5
  with:
    python-version: ${{ env.PYTHON_VERSION }}

- name: Cache pip packages
  uses: actions/cache@v3
  with:
    path: ~/.cache/pip
    key: ${{ runner.os }}-pip-lint-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
    restore-keys: |
      ${{ runner.os }}-pip-lint-${{ env.CACHE_VERSION }}-
      ${{ runner.os }}-pip-

- name: Install linting tools
  run: |
    python -m pip install --upgrade pip
    pip install flake8 black isort

- name: Run flake8
  run: flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503,E501 --exclude=__pycache__
  continue-on-error: true  # Don't fail on lint warnings

- name: Check black formatting
  run: black --check src/ tests/ --line-length=100
  continue-on-error: true

- name: Check import sorting
  run: isort --check-only src/ tests/ --profile black
  continue-on-error: true
```

test:
runs-on: ${{ matrix.os }}
timeout-minutes: 20
strategy:
fail-fast: false
matrix:
os: [ubuntu-latest]
python-version: [“3.10”, “3.11”]
include:
- os: ubuntu-latest
python-version: “3.11”
coverage: true

```
steps:
- uses: actions/checkout@v4

- name: Set up Python ${{ matrix.python-version }}
  uses: actions/setup-python@v5
  with:
    python-version: ${{ matrix.python-version }}

- name: Cache pip packages
  uses: actions/cache@v3
  with:
    path: ~/.cache/pip
    key: ${{ runner.os }}-pip-test-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
    restore-keys: |
      ${{ runner.os }}-pip-test-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-
      ${{ runner.os }}-pip-

- name: Cache models
  uses: actions/cache@v3
  with:
    path: |
      ~/.cache/huggingface
      ~/.cache/torch
      ~/.cache/sentence_transformers
    key: ${{ runner.os }}-models-${{ env.CACHE_VERSION }}-${{ hashFiles('src/rag_doc_qa/config.py') }}
    restore-keys: |
      ${{ runner.os }}-models-${{ env.CACHE_VERSION }}-

- name: Install system dependencies
  run: |
    sudo apt-get update
    sudo apt-get install -y \
      build-essential \
      python3-dev \
      poppler-utils \
      tesseract-ocr \
      libgomp1

- name: Install Python dependencies
  run: |
    python -m pip install --upgrade pip setuptools wheel
    # Install PyTorch CPU version for CI
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
    # Install other dependencies
    pip install -r requirements.txt
    # Install test dependencies
    pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-mock

- name: Create test directories
  run: |
    mkdir -p data/cache data/index data/uploads
    mkdir -p examples/sample_docs

- name: Create sample test files
  run: |
    echo "This is a test document for CI/CD pipeline." > examples/sample_docs/test.txt
    echo "# Test Markdown\n\nThis is a test markdown file." > examples/sample_docs/test.md

- name: Run tests with coverage
  if: matrix.coverage
  run: |
    pytest tests/ -v \
      --cov=src/rag_doc_qa \
      --cov-report=term-missing \
      --cov-report=xml \
      --cov-report=html \
      --timeout=60 \
      --ignore=tests/test_gpu.py \
      -m "not slow and not requires_gpu"
  env:
    PYTHONPATH: ${{ github.workspace }}/src
    LLM_BACKEND: mock
    EMBED_MODEL: sentence-transformers/all-MiniLM-L6-v2
    USE_GPU_INDEX: false
    GRADIO_ANALYTICS_ENABLED: false

- name: Run tests without coverage
  if: '!matrix.coverage'
  run: |
    pytest tests/ -v \
      --timeout=60 \
      --ignore=tests/test_gpu.py \
      -m "not slow and not requires_gpu"
  env:
    PYTHONPATH: ${{ github.workspace }}/src
    LLM_BACKEND: mock
    EMBED_MODEL: sentence-transformers/all-MiniLM-L6-v2
    USE_GPU_INDEX: false
    GRADIO_ANALYTICS_ENABLED: false

- name: Upload coverage reports
  if: matrix.coverage
  uses: codecov/codecov-action@v3
  with:
    file: ./coverage.xml
    flags: unittests
    name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
    fail_ci_if_error: false
```

integration-test:
runs-on: ubuntu-latest
timeout-minutes: 15
needs: [test]
steps:
- uses: actions/checkout@v4

```
- name: Set up Python
  uses: actions/setup-python@v5
  with:
    python-version: ${{ env.PYTHON_VERSION }}

- name: Cache dependencies
  uses: actions/cache@v3
  with:
    path: |
      ~/.cache/pip
      ~/.cache/huggingface
    key: ${{ runner.os }}-integration-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}

- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install torch --index-url https://download.pytorch.org/whl/cpu
    pip install -r requirements.txt

- name: Test document ingestion
  run: |
    python -c "
```

from pathlib import Path
from src.rag_doc_qa import DocumentIngestor
ingestor = DocumentIngestor()
Path(‘test.txt’).write_text(‘Test content’)
docs = ingestor.ingest_file(Path(‘test.txt’))
assert len(docs) > 0
print(‘✓ Document ingestion test passed’)
“
env:
PYTHONPATH: ${{ github.workspace }}

```
- name: Test embedding generation
  run: |
    python -c "
```

from src.rag_doc_qa import EmbeddingModel
model = EmbeddingModel()
embedding = model.embed_query(‘test query’)
assert embedding.shape[0] > 0
print(‘✓ Embedding test passed’)
“
env:
PYTHONPATH: ${{ github.workspace }}
TRANSFORMERS_OFFLINE: false

```
- name: Test API endpoint
  run: |
    # Start the server in background
    timeout 30 python -m src.rag_doc_qa.web_app &
    SERVER_PID=$!
    
    # Wait for server to start
    sleep 10
    
    # Test health check
    curl -f http://localhost:7860/ || exit 1
    
    # Kill the server
    kill $SERVER_PID || true
  env:
    PYTHONPATH: ${{ github.workspace }}
    LLM_BACKEND: mock
    GRADIO_SERVER_NAME: 0.0.0.0
  continue-on-error: true
```

build-docker:
runs-on: ubuntu-latest
timeout-minutes: 20
steps:
- uses: actions/checkout@v4

```
- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3

- name: Cache Docker layers
  uses: actions/cache@v3
  with:
    path: /tmp/.buildx-cache
    key: ${{ runner.os }}-buildx-${{ env.CACHE_VERSION }}-${{ github.sha }}
    restore-keys: |
      ${{ runner.os }}-buildx-${{ env.CACHE_VERSION }}-
      ${{ runner.os }}-buildx-

- name: Build Docker image
  uses: docker/build-push-action@v5
  with:
    context: .
    push: false
    tags: rag-doc-qa:test
    cache-from: type=local,src=/tmp/.buildx-cache
    cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    build-args: |
      BUILDKIT_INLINE_CACHE=1

- name: Move cache
  run: |
    rm -rf /tmp/.buildx-cache
    mv /tmp/.buildx-cache-new /tmp/.buildx-cache

- name: Test Docker image
  run: |
    docker run --rm rag-doc-qa:test python -c "
```

from rag_doc_qa import **version**
print(f’Version: {**version**}’)
“

build-package:
runs-on: ubuntu-latest
timeout-minutes: 10
needs: [lint, test]
steps:
- uses: actions/checkout@v4

```
- name: Set up Python
  uses: actions/setup-python@v5
  with:
    python-version: ${{ env.PYTHON_VERSION }}

- name: Install build tools
  run: |
    python -m pip install --upgrade pip
    pip install build twine

- name: Build distribution
  run: python -m build

- name: Check distribution
  run: |
    twine check dist/*
    ls -lh dist/

- name: Upload artifacts
  uses: actions/upload-artifact@v3
  with:
    name: dist-packages
    path: dist/
    retention-days: 7
```

security-scan:
runs-on: ubuntu-latest
timeout-minutes: 10
steps:
- uses: actions/checkout@v4

```
- name: Run Trivy security scan
  uses: aquasecurity/trivy-action@master
  with:
    scan-type: 'fs'
    scan-ref: '.'
    format: 'sarif'
    output: 'trivy-results.sarif'
    severity: 'CRITICAL,HIGH'
    ignore-unfixed: true

- name: Upload Trivy results
  uses: github/codeql-action/upload-sarif@v2
  with:
    sarif_file: 'trivy-results.sarif'
  continue-on-error: true

- name: Run safety check
  run: |
    pip install safety
    pip install -r requirements.txt
    safety check --json || true
  continue-on-error: true
```

deploy:
if: github.ref == ‘refs/heads/main’ && github.event_name == ‘push’
runs-on: ubuntu-latest
needs: [build-package, build-docker, integration-test]
steps:
- uses: actions/checkout@v4

```
- name: Deploy notification
  run: |
    echo "Deployment would happen here"
    echo "Branch: ${{ github.ref }}"
    echo "Commit: ${{ github.sha }}"
    # Add actual deployment steps here
```